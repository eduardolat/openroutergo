package openroutergo

import (
	"encoding/json"

	"github.com/orsinium-labs/enum"
)

type ChatCompletionMessage struct {
	// The ID of the tool call, if the message is a tool call.
	ToolCallID string `json:"tool_call_id,omitempty,omitzero"`
	// The name of the entity that sent the message or the name of the tool, if the message is a tool call.
	Name string `json:"name,omitempty,omitzero"`
	// Who the message is from. Must be one of openroutergo.RoleSystem, openroutergo.RoleUser, or openroutergo.RoleAssistant.
	Role chatCompletionRole `json:"role"`
	// The content of the message
	Content string `json:"content"`
	// When the model decided to call a tool
	ToolCalls []ChatCompletionMessageToolCall `json:"tool_calls,omitempty,omitzero"`
}

// chatCompletionRole is an enum for the role of a message in a chat completion.
type chatCompletionRole enum.Member[string]

// MarshalJSON implements the json.Marshaler interface for chatCompletionRole.
func (ccr chatCompletionRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(ccr.Value)
}

// UnmarshalJSON implements the json.Unmarshaler interface for chatCompletionRole.
func (ccr *chatCompletionRole) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	*ccr = chatCompletionRole{Value: value}
	return nil
}

var (
	// RoleSystem is the role of a system message in a chat completion.
	RoleSystem = chatCompletionRole{"system"}
	// RoleDeveloper is the role of a developer message in a chat completion.
	RoleDeveloper = chatCompletionRole{"developer"}
	// RoleUser is the role of a user message in a chat completion.
	RoleUser = chatCompletionRole{"user"}
	// RoleAssistant is the role of an assistant message in a chat completion.
	RoleAssistant = chatCompletionRole{"assistant"}
	// RoleTool is the role of a tool message in a chat completion.
	RoleTool = chatCompletionRole{"tool"}
)

type ChatCompletionMessageToolCall struct {
	// The ID of the tool call.
	ID string `json:"id"`
	// The type of tool call. Always "function".
	Type string `json:"type"`
	// Function is the function that the model wants to call.
	Function ChatCompletionMessageToolCallFunction `json:"function,omitempty,omitzero"`
}

type ChatCompletionMessageToolCallFunction struct {
	// The name of the function to call.
	Name string `json:"name"`
	// The arguments to call the function with, as generated by the model in JSON
	// format. Note that the model does not always generate valid JSON, and may
	// hallucinate parameters not defined by your function schema. Validate the
	// arguments in your code before calling your function.
	//
	// You have to unmarshal the arguments to the correct type yourself.
	Arguments string `json:"arguments"`
}
